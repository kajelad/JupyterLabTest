{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we import libraries. This being a numpy tutorial, we'll need numpy, and pyplot will be useful for plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we talk about numpy arrays, we can talk about python's default container, the `list`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 1.12, 'abc', <built-in function print>, <class 'list'>, <module 'numpy' from '/usr/local/lib/python3.5/dist-packages/numpy/__init__.py'>, [...]]\n"
     ]
    }
   ],
   "source": [
    "# instantiate a list containing:\n",
    "#     an int,\n",
    "#     a float,\n",
    "#     a string\n",
    "#     a funtion\n",
    "li = [2, 1.12, \"abc\", print, list]\n",
    "# we can also add elements dynamically\n",
    "li.append(np)\n",
    "li.append(li)\n",
    "# yes, this list contains itself. this is fine\n",
    "print(li)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The power of the python list is its flexibility. This comes from the fact that list do not contain (in the memory sense) the objects inside them. Instead, they containt _references_ to their contents. The objects handle their own memory, and the list merely keeps track of their locations in memory. This means, among other things, that objects can be literally anything, because references aren't type-specific, and that objects can be added easily, since references are small.\n",
    "\n",
    "The drawback of this reference approach is that, in numerical applications, this flexibility is often useless, and it comes at the cost of trmendous inefficiency. If we have a list of a million numbers. Each number has to allocate its own memory, and hold on to all of the extraneous information about its type. This isn't necessary, as each object is the same.\n",
    "\n",
    "The more suitable container for this situation is the _array_ (or _vector_). Every object in an array must have the same type, and that type must have a fixed size (in memory). For instance, the floating point type `np.float64` always occupies exactly 64 bits. An array handles the memory of its contetns: it holds a _single_ copy the type metadata, and allocates a single, contiguous chunk of memory and puts all of the elements in the specified place. To get element `n` of a `float64` array, it looks at the `n*64`th to `(n+1)*64`th bits.\n",
    "\n",
    "Now we can look at the standard implementation of numerical arrays in python: `np.ndarray` (note `np.array` is a shorthand for the 1D case). These always have the following attributes:\n",
    "\n",
    " - `dtype` the (fixed) data type. These must be numpy dtype (`np.float64`, `np.int32`, `np.bool_`, etc.), but default types (`int`, `float`) are automatically converted.\n",
    " - `size` total number of elements (even in multiple dimensions)\n",
    " - `ndim` number of dimensions\n",
    " - `shape` size in each dimension, as a `ndim`-tuple\n",
    "\n",
    "as well as many others. An important principal is that numpy arrays are encoded \"C-style\" in memory. That is, running over the last index first, then the previous ones (think of the range 000-999 as a 10x10x10 array. As we go through elements, the ones place cycles first, followed by the tens, etc).\n",
    "\n",
    "A single block of memory can have mutiple references with different shapes, etc. These are called _views_. Managing these requires some care, but can be quite useful, as it saves a lot of resources. A common way to get multiple views is with indexing and the `reshape` method.\n",
    "\n",
    "The distinction between views and copies is quite subtle. Knowing which will occur in a situation often requires careful reading of the documentation, or just explicitly checking."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "one_tensor[0] = 0\n",
      "two_tensor[0, 0] = 0\n",
      "four_tensor[0, 0, 0, 0] = 0\n",
      "set one_tensor[0] to -1\n",
      "one_tensor[0] = 0\n",
      "two_tensor[0, 0] = 0\n",
      "four_tensor[0, 0, 0, 0] = 0\n"
     ]
    }
   ],
   "source": [
    "# make an 1D array of size 81. Its dtype is implicitly np.int32\n",
    "one_tensor = np.arange(81)\n",
    "# make a 9x9 array from this flat array\n",
    "two_tensor = one_tensor.reshape(9, 9)\n",
    "# make a 3x3x3x3 array from this flat array\n",
    "four_tensor = one_tensor.reshape(3, 3, 3, 3)\n",
    "# one_tensor, two_tensor, and four_tensor are views of the same array. This shows up if we try\n",
    "# to change an element of any one of them\n",
    "print(\"one_tensor[0] =\", one_tensor[0])\n",
    "print(\"two_tensor[0, 0] =\", two_tensor[0, 0])\n",
    "print(\"four_tensor[0, 0, 0, 0] =\", four_tensor[0, 0, 0, 0])\n",
    "# now we change this element of one_tensor. What will happen to the others?\n",
    "print(\"set one_tensor[0] to -1\")\n",
    "one_tensor[0] = -1\n",
    "print(\"one_tensor[0] =\", one_tensor[0])\n",
    "print(\"two_tensor[0, 0] =\", two_tensor[0, 0])\n",
    "print(\"four_tensor[0, 0, 0, 0] =\", four_tensor[0, 0, 0, 0])\n",
    "one_tensor[0] = 0\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we get to the most important feature in numpy indexing. As you have seen, every array can be indexed to retrieve a single element using a set of integers. In addition, arrays of multiple dimensions can be _partialli indexed_, by specifying only some of the indices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "two_tensor[0, :] =\n",
      "[0 1 2 3 4 5 6 7 8]\n",
      "two_tensor[:, 0] =\n",
      "[ 0  9 18 27 36 45 54 63 72]\n",
      "four_tensor[1, :, 2, :] =\n",
      "[[33 34 35]\n",
      " [42 43 44]\n",
      " [51 52 53]]\n"
     ]
    }
   ],
   "source": [
    "# To leave an index free, the : symbol is used\n",
    "# two_tensor[0] is the same as two_tensor [0, :]\n",
    "print(\"two_tensor[0, :] =\", two_tensor[0, :], sep=\"\\n\")\n",
    "print(\"two_tensor[:, 0] =\", two_tensor[:, 0], sep=\"\\n\")\n",
    "# four_tensor[1, :, 2, :] is a 3x3 array given by array[i, j] = four_tensor[1, i, 2, j]\n",
    "print(\"four_tensor[1, :, 2, :] =\", four_tensor[1, :, 2, :], sep=\"\\n\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It may be worth noting that the subarrays obtained by partial indexing are views.\n",
    "\n",
    "When indexing, we need not specify a _single_ value along an axis. There are many tools which allow us to choose a specific _subset_ of values. The first of these is called _slicing_ (which is also used in python lists).\n",
    "\n",
    "A slice has the form `a : b : c`, or `start : end : stride` which is shorthand for\n",
    "\\begin{align*}\n",
    "& a \\\\\n",
    "& a+c \\\\\n",
    "& a+2c \\\\\n",
    "& \\vdots \\\\\n",
    "& a+nc<b\n",
    "\\end{align*}\n",
    "with the last inequality flipped if c is negative, with the shorthands (here `N` shortand for the size of the axis being indexed):\n",
    "\n",
    "`a:b` = `a:b:1` stride defaults to 1\n",
    "\n",
    "`:b:c` = `0:b:c` start defaults to 0\n",
    "\n",
    "`a::c` = `a:N:c` end defaults to -1\n",
    "\n",
    "`a:-b:c` = `a:N-b:c` standard negative indexing convention\n",
    " \n",
    "`-a:b:c` = `N-a:b:c` standard negative indexing convention\n",
    "\n",
    "Slicing typically returns a view of the sliced array."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
